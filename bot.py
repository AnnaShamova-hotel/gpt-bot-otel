import requests
from flask import Flask, request
import os
from dotenv import load_dotenv
from collections import defaultdict, deque

load_dotenv()

app = Flask(__name__)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY")
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
GPT_MODEL = "gpt-4"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ (–≤ –ø–∞–º—è—Ç–∏, –ø–æ chat_id)
chat_histories = defaultdict(lambda: deque(maxlen=6))

SYSTEM_PROMPT = """
üß≠ –¢–≤–æ—è —Ä–æ–ª—å: —Å—Ç—Ä–∞—Ç–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–æ–¥–∞—ë—Ç, –∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≤–ª—é–±–ª—ë–Ω–Ω–æ—Å—Ç—å
–¢—ã ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥ –∏ –±—Ä–µ–Ω–¥-–¥–∏—Ä–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –æ—Ç–µ–ª—å –≤ –º–µ—Å—Ç–æ —Å–∏–ª—ã...
(–í–°–¢–ê–í–¨ –°–Æ–î–ê –ü–û–õ–ù–û–°–¢–¨–Æ ‚Äî –≤—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ —Ñ–∞–π–ª–µ)
"""

def ask_gpt(chat_id, user_text):
    chat = chat_histories[chat_id]
    chat.append({"role": "user", "content": user_text})
    messages = [{"role": "system", "content": SYSTEM_PROMPT}] + list(chat)

    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    json_data = {
        "model": GPT_MODEL,
        "messages": messages
    }
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=json_data)
    reply = response.json()["choices"][0]["message"]["content"]
    chat.append({"role": "assistant", "content": reply})
    return reply

def send_message(chat_id, text):
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}
    requests.post(url, json=payload)

@app.route("/", methods=["POST"])
def webhook():
    data = request.get_json()
    if "message" in data and "text" in data["message"]:
        chat_id = str(data["message"]["chat"]["id"])
        user_text = data["message"]["text"]

        if user_text == "/start":
            intro = "–ü—Ä–∏–≤–µ—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–≤–∏–¥–µ—Ç—å, —á–µ–º —Ç–≤–æ—ë –º–µ—Å—Ç–æ ‚Äî –Ω–µ –∫–∞–∫ –≤—Å–µ. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –†–∞—Å—Å–∫–∞–∂–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—Ç–µ–ª—å?"
            chat_histories[chat_id].clear()
            chat_histories[chat_id].append({"role": "assistant", "content": intro})
            send_message(chat_id, intro)
        else:
            reply = ask_gpt(chat_id, user_text)
            send_message(chat_id, reply)

    return {"ok": True}